/* CopyBookParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CopyBookParserTokenManager.java */
package com.asksunny.copybook;
import com.asksunny.copybook.elements.*;

/** Token Manager. */
@SuppressWarnings("unused")public class CopyBookParserTokenManager implements CopyBookParserConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffff80L) != 0L)
         {
            jjmatchedKind = 59;
            return 44;
         }
         if ((active0 & 0xc0000000000L) != 0L)
            return 44;
         if ((active0 & 0x2L) != 0L)
            return 45;
         if ((active0 & 0xc000000000000L) != 0L)
            return 46;
         if ((active0 & 0x7000000000L) != 0L)
         {
            jjmatchedKind = 41;
            return 47;
         }
         if ((active0 & 0x80000000000000L) != 0L)
            return 0;
         if ((active0 & 0x30000000000000L) != 0L)
            return 48;
         if ((active0 & 0x2000000000000L) != 0L)
            return 49;
         if ((active0 & 0x1000000000000L) != 0L)
            return 50;
         return -1;
      case 1:
         if ((active0 & 0x4000000000000L) != 0L)
            return 18;
         if ((active0 & 0x7fbfffe80L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
            return 44;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 23;
         if ((active0 & 0x7000000000L) != 0L)
            return 47;
         if ((active0 & 0x4000100L) != 0L)
            return 44;
         return -1;
      case 2:
         if ((active0 & 0x7fbfffe80L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 2;
            return 44;
         }
         return -1;
      case 3:
         if ((active0 & 0x1ffe00L) != 0L)
            return 44;
         if ((active0 & 0x7fbe00080L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 3;
            }
            return 44;
         }
         return -1;
      case 4:
         if ((active0 & 0x7c00L) != 0L)
            return 51;
         if ((active0 & 0x4f8ff8080L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 4;
            }
            return 44;
         }
         if ((active0 & 0x303000000L) != 0L)
            return 44;
         return -1;
      case 5:
         if ((active0 & 0x4aaff8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
            return 44;
         }
         if ((active0 & 0x7c00L) != 0L)
            return 51;
         if ((active0 & 0x50000080L) != 0L)
            return 44;
         return -1;
      case 6:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 5;
            }
            return 51;
         }
         if ((active0 & 0x40ac00000L) != 0L)
            return 44;
         if ((active0 & 0x803f8000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 6;
            }
            return 44;
         }
         return -1;
      case 7:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 51;
         }
         if ((active0 & 0x800000L) != 0L)
            return 51;
         if ((active0 & 0x803f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 7;
            return 44;
         }
         return -1;
      case 8:
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 44;
         }
         if ((active0 & 0x800000L) != 0L)
            return 51;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 8;
            return 51;
         }
         if ((active0 & 0x80200000L) != 0L)
            return 44;
         return -1;
      case 9:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 51;
         }
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
            return 44;
         }
         return -1;
      case 10:
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 10;
            return 44;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 10;
            return 51;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 11;
            return 51;
         }
         if ((active0 & 0x1f8000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 11;
            return 44;
         }
         return -1;
      case 12:
         if ((active0 & 0x1f8000L) != 0L)
            return 44;
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 59;
               jjmatchedPos = 12;
            }
            return 51;
         }
         return -1;
      case 13:
         if ((active0 & 0x201f0000L) != 0L)
            return 51;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 1, 45);
      case 34:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 36:
         return jjStopAtPos(0, 57);
      case 39:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStartNfaWithStates_0(0, 55, 0);
      case 43:
         return jjStopAtPos(0, 54);
      case 44:
         return jjStartNfaWithStates_0(0, 49, 49);
      case 45:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStartNfaWithStates_0(0, 48, 50);
      case 47:
         return jjStopAtPos(0, 56);
      case 54:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 55:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 56:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 58:
         return jjStopAtPos(0, 47);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1ffe00L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xe00000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x7000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0xc0000000L);
      case 83:
      case 115:
         return jjStartNfaWithStates_0(0, 43, 44);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 86:
      case 118:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 50, 18);
         break;
      case 39:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 23);
         break;
      case 54:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 47);
         break;
      case 55:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 47);
         break;
      case 56:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 47);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc8200000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00080L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1ffe00L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 44);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x108000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x70000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x83000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1ffe00L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x83200000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000000L);
      case 80:
      case 112:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xdffc00L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x210000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x7c00L);
      case 69:
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 44);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x50000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4001f8000L);
      case 88:
      case 120:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 51);
         break;
      case 50:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 51);
         break;
      case 51:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 51);
         break;
      case 52:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 51);
         break;
      case 53:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 51);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000L);
      case 68:
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0x20200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 44);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x1f8000L);
      case 89:
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1f8000L);
      case 68:
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 44);
         break;
      case 71:
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 44);
         break;
      case 72:
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 44);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 89:
      case 121:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x1f8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 51);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 71:
      case 103:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 44);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1f8000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1f8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x1f8000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x1f8000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 76:
      case 108:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1f0000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x1f0000L);
      case 76:
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(13, 29, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(14, 16, 51);
         break;
      case 50:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 51);
         break;
      case 51:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(14, 18, 51);
         break;
      case 52:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(14, 19, 51);
         break;
      case 53:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(14, 20, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 39)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(27, 28); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(7, 9); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 26); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(40); }
                  }
                  break;
               case 50:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(28, 29); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 45:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAddTwoStates(4, 3); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAddTwoStates(4, 3); }
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAddStates(10, 14); }
                  }
                  else if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 2)
                        kind = 2;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(9, 10); }
                  else if (curChar == 44)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 10)
                  {
                     if (kind > 4)
                        kind = 4;
                     { jjCheckNAddTwoStates(4, 3); }
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 57)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAdd(15); }
                  }
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 46:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  else if (curChar == 34)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 49:
                  if ((0x800000100003200L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  else if (curChar == 10)
                  {
                     if (kind > 5)
                        kind = 5;
                     { jjCheckNAddTwoStates(6, 7); }
                  }
                  break;
               case 0:
                  if (curChar != 62)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar != 10)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAddTwoStates(4, 3); }
                  break;
               case 4:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAddTwoStates(4, 3); }
                  break;
               case 5:
                  if (curChar == 44)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar != 10)
                     break;
                  if (kind > 5)
                     kind = 5;
                  { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 9:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar != 10)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 13:
                  if ((0x1e000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 15:
                  if (curChar != 57)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
               case 18:
                  if (curChar == 34)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 19:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 34 && kind > 58)
                     kind = 58;
                  break;
               case 21:
               case 23:
                  if (curChar == 39)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 24:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 28:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 31:
                  if (curChar == 34)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 34:
                  if (curChar == 39)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(35, 36); }
                  break;
               case 36:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 37:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 38:
                  if ((0x800000100003200L & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  { jjCheckNAdd(38); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAddStates(10, 14); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(40); }
                  break;
               case 41:
                  if (curChar == 45)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(43, 26); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
               case 22:
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 44:
               case 27:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 47:
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 51:
               case 29:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(28, 29); }
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     { jjCheckNAddTwoStates(27, 28); }
                  }
                  if ((0x100000201000002L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     { jjCheckNAdd(15); }
                  }
                  if ((0x100000001000000L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 46:
               case 17:
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 15:
                  if ((0x100000201000002L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  { jjCheckNAdd(15); }
                  break;
               case 30:
                  if ((0x100000001000000L & l) != 0L)
                     { jjAddStates(21, 22); }
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(23, 24); }
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(25, 26); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 48:
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 46:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddStates(18, 20); }
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 24, 25, 41, 43, 26, 42, 41, 26, 42, 40, 41, 43, 26, 42, 38, 
   4, 3, 17, 19, 20, 31, 34, 32, 33, 35, 36, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\66\66", "\67\67", "\70\70", 
null, null, null, null, null, "\55", "\50", "\51", "\72", "\56", "\54", "\42\42", 
"\42", "\47\47", "\47", "\53", "\52", "\57", "\44", null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CopyBookParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public CopyBookParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x3eL, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[44];
    static private final int[] jjstateSet = new int[2 * 44];

    
    static protected char curChar;
}
